{"pageProps":{"article":{"data":{"id":11,"attributes":{"title":"브라우저의 쿠키, 세션, 웹 스토리지(로컬, 세션)","content":"![쿠키.png](https://cobb-dev-backend-u8nfg.ondigitalocean.app/uploads/_f8ef8e55de.png)\n\n## 저장소의 진화\n\n2014년 10월 28일 표준화된 HTML5 버전 시작에 따라, 우리는 `정보(데이터)`를 클라이언트 사이드에 캐시하거나 저장할 수 있는 또 하나의 방법이 주어졌습니다. 바로 **로컬 스토리지**입니다.\n\nHTML5 버전 이전에는, 서비스의 데이터는 쿠키에 저장되어 왔고, 클라이언트와 서버의 요청마다 항상 전달 돼왔습니다. 이는 당연히 요청-응답 시간에 영향을 주게 됐고, 퍼포먼스의 저하로 이어지게 됐습니다.\n\n하지만 웹 스토리지의 등장 이후, 서비스의 데이터를 더 안전하고, 큰 저장소에 저장할 수 있게 됐습니다. 쿠키와 다르게 요청에 항상 전달되지 않는 저장소기 때문에, 퍼포먼스 저하 측면에서도 자유로울 수 있었죠.\n\n쿠키의 최대 용량 용량은 4KB, 로컬 스토리지의 최대 용량은 5MB입니다. 차이가 엄청나죠?\n\n## 클라이언트 저장소에 왜 데이터를 적재하는지\n\n저장소가 필요한 가장 큰 이유는 당연하게도 퍼포먼스의 향상 입니다.\n\n로컬(클라이언트) 저장소에 저장된 데이터들은 바로 접근이 가능합니다. 정보를 위해 서버와 통신할 필요가 없죠. 서버와 통신하기 위해선 자원(통신에 필요한 최소 비용)이 필수적으로 발생하기 때문에, 모든 정보를 서버에 저장해버리고 필요할 때마다 통신할 수 없는 이유입니다.\n\n## 쿠키와 세션을 왜 사용하는지\n쿠키와 세션은 HTTP 프로토콜의 특징인 Stateless를 보완하기 위해사용됩니다.\n> 서버: 이 사람이 방금 그 사람이 맞나?\n> 서버: 어떻게 확인하지?\n> 아! 쿠키에 어떤 정보들이 있는지 보면 되겠다.or 아! 세션 id를 받아서 이 사용자가 원하는 상태가 뭔지 알면 되겠다.\n\n상태가 없는 프로토콜은 이전 요청을 기억하지 않습니다. 한 사람이 두개의 요청을 하게 되면 각각 다른 요청으로 취급하는 거죠(독립적인 트랙젝션). 쿠키나 세션을 저장된 정보를 이용해 해당 유저가 원하는 상태(state)를 알 수 있게 됩니다.\n\n## HTTP Cookie (쿠키)\n쿠키는 서버에서 브라우저로 전달하는 작은 정보 텍스트 파일입니다. 쿠키는 언제 사용될까요?\n\n1. 활동 관리\n2. 개인화\n3. 사용자 추적\n\n크롬을 사용하신 분들이라면 내가 자주 봐왔던 물건들과 유사한 아이템들이 웹사이트 광고로 노출되는 경험을 해보셨을 겁니다.\n\n> 아니.. 구글이 내 컴퓨터 감시하나..?\n\n<u>Chrome browser saves cookies on your computer, mobile phone, or tablet.</u>\n\n실제론 쿠키를 사용해서 personalized advertisement를 노출시키는 방식이었던 거죠.\n\n그 외에도 다크모드, 로그인 등 다양한 기능에서 사용됩니다.\n\n### 쿠키의 장점과 단점\n\n**쿠키의 장점**\n1. 유저 친화적 (유저가 직접 쿠키를 건드릴 수 있음)\n2. 지속 가능성 (쿠키는 만료시간을 정할 수 있고, 데이터 저장소기 때문에 지속적인 접근에 용이함)\n3. 마케팅 (수많은 e-commerce 사이트들은 쿠키를 이용해 사용자에게 알맞은 광고를 노출시킴)\n\n**쿠키의 단점**\n1. 보안상 문제1 (로그인 정보가 담긴 쿠키 파일이 악의적인 사용자에 의해 탈취된다면 큰 문제로 이어질 수 있음)\n2. 보안상 문제2 (탈취가 아니어도, 사용자의 정보를 무단으로 수집하기 위해 쿠키를 사용하는 경우도 있으며, 유저들은 대부분은 쿠키의 용도와 활용성을 모르기 때문에 쿠키 수집을 간과함)\n3. 쿠키의 용량 문제 (도메인당 20개의 쿠키를 저장할 수 있지만, 4KB밖에 안되는 작은 용량으로 한계가 있음)\n4. 쿠키 거부 (유저들이 쿠키 정보 수집을 거부하는 경우도 있고, 몇몇 브라우저는 쿠키 수집을 자체적으로 거부함)\n\n## 세션\n서버에 클라이언트의 상태 정보를 저장하는 기술로 논리적인 연결을 세션이라고 합니다.\n\n> 서버: 우리가 너네 클라이언트 정보 저장할게 ㅇㅇ 쿠키에 저장하지 마\n> \n> 클라이언트: 그럼 내가 이 사람이 원하는 상태를 응답값으로 받고 싶을 땐 어떡해?\n> \n> 서버: 그럼 우리가 이 세션에 접근할 수 있는 ID값을 하나 너네한테 줄게. 고유 값이니까 클라이언트 구분 가능함\n> \n> 클라이언트: ㅇㅋ. 그럼 그 ID값 우리가 갖고 있다가 유저 상태가 필요할 때 요청에 얹어서 보내주면 되지?\n> \n> 서버: ㅇㅇ 그럼 됨\n\n웹 서버에 클라이언트에 대한 정보를 저장하고 클라이언트에게는 클라이언트를 구분할 수 있는 ID를 부여하는데 이것을 세션 ID라고 합니다. 서버에 저장된 클라이언트의 상태가 `자물쇠`라면, 세션 아이디는 해당 자물쇠를 열 수 있는 `키`인 거죠.\n\n일반적으로 세션 ID를 쿠키에 저장합니다. 그래서 쿠키, 세션은 독립적인 개념이 아닙니다. 방법론의 일부로 서로 쓰이고 쓰이는 관계가 되는 거죠.\n\n### 세션의 장단점\n\n**세션의 장점**\n1. 쿠키보다 나은 보안 (쿠키에 정보가 저장되어 있지 않음, 클라이언트에서 중요 정보를 핸들링할 필요 없음)\n2. 큰 용량 (저장 개수나 용량 제한이 없음)\n3. 퍼포먼스 (세션 ID만 전달하므로 네트워크 부하가 상대적으로 적음. 쿠키는 텍스트 파일이기 때문에 읽는 속도가 훨씬 빠름)\n\n**세션의 단점**\n1. 서버의 부하 (서버는 세션 ID를 받아, 해당 정보의 유저를 탐색하고, 응답 값으로 전달해야 하기 때문에 서버의 부하가 커짐)\n\n## 그럼, 쿠키랑 세션 둘 중에 뭘 더 많이쓸까?\n\n**쿠키를 더 많이 씁니다.**\n\n이유는 간단합니다. 서버에 부담가는 걸 피하기 위해서죠.\n\n## 쿠키, 세션을 보완할 방법이 있을까?\n\n상기된 HTML5 버전의 등장과 함께, 웹 스토리지가 등장했습니다. 자바스크립트를 공부하면 한 번씩 들어본 이름인, Local Storage(로컬 스토리지) 와 Session Storage(세션 스토리지) 입니다.\n\n그럼, 로컬 스토리지와 세션 스토리지의 특징을 알아볼까요?\n\n## 웹 스토리지\n\n웹 스토리지는 로컬 스토리지와 세션 스토리지를 감싸는 더 큰 범주입니다.\n\n웹 스토리지의 특징들은 로컬 스토리지와 세션 스토리지가 공유하는 특징과 같습니다. 공유하는 특징도 있지만 이름이 다른 만큼 차이점도 존재하죠. 먼저 웹 스토리지의 특징부터 알아보겠습니다.\n\n1. 웹 요청시, 서버로 전달되지 않음\n2. 쿠키와 다르게 용량이 큼 ( 쿠키 4KB, 웹 스토리지 5MB )\n3. 단순 문자열이 아닌, 객체로 정보 저장 가능\n4. 영구적인 데이터 저장 가능\n\n클라이언트에 데이터 저장도 가능하고, 쿠키와 다르게 요청시 전송되어 네트워크 부하가 생기거나 서버에 부담이 가지도 않고, 용량도 크고.. 객체로 정보를 저장하면 개발할 때도 용이하겠죠?\n\n쿠키, 세션보다 상위 개념이라고 말하진 않겠습니다. 왜냐면 쿠키가 필요한 용도가 있기 때문이죠. 다만 쿠키나 세션의 단점을 보완할 수 있는 스토리지라고 말할 수 있을 것 같습니다.\n\n### 그럼 로컬 스토리지랑 세션 스토리지 차이는 뭐지?\n\n로컬 스토리지에 저장된 정보들은 모든 탭과 창에서 공유 됩니다. 브라우저나 OS를 재시작해도 로컬 스토리지에 저장된 정보들은 파기되지 않습니다.\n\n반면에 세션 스토리지에 저장된 정보들은 현재 탭에서만 정보가 유지됩니다. 크롬 시크릿모드를 생각해봅시다.\n\n> 어? 크롬 시크릿 모드에선 하나의 탭에서 로그인 하고 다른 탭 켜도 로그인이 돼있는데요? 세션 스토리지는 탭에서만 정보가 유지된다면서요?\n\n구글의 답변입니다 (incognito는 private mode입니다).\n\n> When you first open a new Incognito window, you’re creating a new Incognito browsing session. Any Incognito windows you open after that are part of the same session. You can end that Incognito session by closing all open Incognito windows.\n\n하나의 탭에 여러 개의 iframe이 있는 경우엔 동일한 오리진에서 왔다고 취급되기 때문에 sessionStorage가 공유된다고 합니다. 구글에서도 private 모드를 하나의 document로 보고, 그 안의 탭이 같은 세션을 공유하기 때문에 시크릿 모드가 유지됩니다.\n\n둘의 차이점은 간단히 말하면 **영구성**입니다. 영구적으로 남을 데이터가 필요하면 로컬 스토리지로, 탭이 종료될 때 사라져야하는 데이터라면 세션 스토리지에 저장하면 되겠죠? 이를 주의해서 로컬 스토리지에 로그인 정보나 민감한 정보들을 저장할 일이 없어야합니다.\n\n## 맺으며\n오늘은 브라우저의 쿠키, 세션, 스토리지에 대해서 공부해봤는데, 이를 문서화하면서 저도 좀 더 스토리지의 등장과 장단점에 대해 알게 됐습니다. 이제 진행중인 프로젝트 로그인을 구현하는데, 각자 장단점을 잘 취합해 백엔드 분들과 얘기하면서 보안에 신경써야 겠습니다.","subtitle":"쿠키, 세션, 웹 스토리지는 왜 사용되고, 어떨때 주의해야 하는지에 대해 알아봐요!","createdAt":"2022-12-14T06:16:47.976Z","updatedAt":"2022-12-14T07:47:03.228Z","publishedAt":"2022-12-14T07:44:32.105Z","thumbnail":{"data":{"id":2,"attributes":{"name":"browser.png","alternativeText":null,"caption":null,"width":500,"height":300,"formats":{"thumbnail":{"ext":".png","url":"/uploads/thumbnail_browser_362bf6de2b.png","hash":"thumbnail_browser_362bf6de2b","mime":"image/png","name":"thumbnail_browser.png","path":null,"size":6.45,"width":245,"height":147}},"hash":"browser_362bf6de2b","ext":".png","mime":"image/png","size":9.22,"url":"/uploads/browser_362bf6de2b.png","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-21T09:38:48.965Z","updatedAt":"2022-11-30T09:09:15.266Z"}}},"tag":{"data":{"id":1,"attributes":{"tag":"Broswer","createdAt":"2022-11-21T09:37:04.868Z","updatedAt":"2022-11-21T09:37:34.745Z","publishedAt":"2022-11-21T09:37:34.732Z"}}}}},"meta":{}}},"__N_SSG":true}