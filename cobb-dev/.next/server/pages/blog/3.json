{"pageProps":{"article":{"data":{"id":3,"attributes":{"title":"자바스크립트 클로저 이해하고 가자.","content":"![Closure.png](https://cobb-dev-backend-u8nfg.ondigitalocean.app/uploads/Closure_064a6eacfc.png)\n\n# Closure ( 클로저 )\n\n## 클로저란?\n\n함수와 함수가 선언된 환경의 관계입니다 (자신이 선언될 때의 환경을 기억하는 함수). Closure는 `폐쇄`를 의미합니다. 그럼 설명을 통해 왜 Closure가 Closure(폐쇄)로 불리는지 알아보겠습니다.\n\n## 클로저를 사용하는 이유?\n\n스코프를 이용해서 접근할 수 없는 환경을 만들 때 사용합니다.\n\n그럼, 코드를 통해 예시를 보겠습니다.\n\n```js\n// 클로저를 만드는 형태\n\nfunction outerFn() {\n  let x = 10;\n\n  return function innerFn(y) { \n    return x = x + y;\n  }\n}\n\nlet a = outerFn(); \n\nconsole.log(a(5)) // 15\nconsole.log(a(5)) // 20\n```\n\n이 코드는 어떻게 클로저 형태를 만들까요? `let a = outerFn();` 코드를 보겠습니다.\n\n변수 `a`는 `outerFn()`을 할당받았습니다. `outerFn()`은 `innerFn()`을 반환합니다. 그럼 `innerFn()`은 무슨 동작을 할까요?\n\n`x`를 외부 스코프에서 받고, `x`의 값을 `x + y`의 값으로 할당합니다.\n\n> `outerFn()`이 `arugument(인자)`를 받지 않습니다. 원래라면 `outerFn(y)`로 작성해야 되는 게 아닌가요?\n\n라고 생각하실 수 있습니다.\n\n`console.log(a(5))`가 가능한 이유는 `변수 a`가 `outerFn()`을 할당받았고, `outerFn()`의 `리턴 값`은 `innerFy()`이기 때문입니다. 그래서 `innerFy(y)`로 인자를 전달해줄 수 있게 됩니다.\n\n이런 형태의 함수를 봤을 때, 외부 스코프에서 `outerFn()` 스코프 안에 있는 `x`의 값에 접근해 값을 조작할 수 있을까요?\n\n**없습니다.** 이게 클로저의 한 형태입니다. `x`에 접근할 수 없는 환경을 만들고, `x`값을 은닉시키고 재사용할 수 있게 만드는 거죠.\n\n### 또 하나 알아야 할 게 있습니다.\n\n```js\nconsole.log(a(5)) // 15\nconsole.log(a(5)) // 20\n```\n\n어떻게 같은 `15`라는 같은 결과가 나오지 않고, 두 번째 호출했을 땐 `15`에서 `5`를 더한 20이 나오게 됐을 까요?\n\n원래라면 함수가 실행되고 종료되면 변수가 초기값인 `10`으로 초기화 되어 두 번째 호출시에도 `15`가 출력돼야 할 것 같은데 말입니다.\n\n마치 react에서 `setState((prev) => prev + 5)` 와 같은 코드처럼 작동하고 있습니다.\n\n이렇게 x값이 누적될 수 있는 이유는 바로\n\n`let a = outerFn();` 로 작성된 코드 때문입니다.\n\n최상위 스코프에서 `outerFn()`을 계속 `변수 a`가 할당받고 있는 형태입니다.\n\n그렇기 때문에 함수 호출이 끝나도 a가 메모리에서 제거되지 않습니다.\n\n클로저를 이해하기 위해선 가비지 컬렉션에 대한 약간의 이해가 필요합니다.\n\n## 가비지 컬렉션\n\n함수 호출이 끝나면 함수에 대응하는 렉시컬 환경이 메모리에서 제거됩니다.\n\n> 가바지 컬렉터: 이거 실행 했으니까 이제 필요없죠?? 메모리 낭비니까 가져다가 버립니다??\n\n**자바스크립트에서 모든 객체는 도달 가능한 상태일 때만 메모리에 유지됩니다.**\n\n(위의 예제는 `let a = outerFn()` 이 `outerFn()` 을 항상 도달 가능한 상태로 만듭니다.)\n\n```jsx\n// 위 예제와 똑같은 형태지만, 도달이 불가능한 객체 설명을 위한 코드블록.\n\nfunction f() {\n  let value = 123;\n\n  return function() {\n    alert(value);\n  }\n}\n\nlet g = f();\n// g가 f()를 계속 참조하기 때문에 메모리에 유지됩니다.\n\ng = null;\n// g가 더이상 함수를 참조하지 않기 때문에 f()는 메모리에서 삭제됩니다.\n```\n\n## 클로저 장점\n\n데이터 보존이 가능합니다.\n\n첫 번째 `console.log(a(5))` 가 끝나도 `let a` 가 할당받은 `outerFn()` ===  `innerFn(y)` 이 외부 스코프에 있는 `x` 를 참조하고 있기 때문에 함수 실행이 종료되도 `x` 는 초기값인 `10` 으로 돌아오지 않는다.\n\n정보 접근을 제한할 수 있습니다.\n\n참조할 수 없는 변수(위의 예제에서는 `let x = 10` 으로 선언된 `x의 값` )를 사용해 클로저를 이용한 제한적 접근을 제외한 모든 경우의 수를 차단할 수 있다. 이 과정을 `은닉화`라고 표현합니다.\n\n## 우리가 자주 사용하는 useState의 원리도 클로저\n\n```js\nfunction counter() {\n\tlet num = 0;\n\n\treturn function() {\n\t\treturn num++\n\t}\n}\n\nconst increase = counter()\n\nconsole.log(increase()) // 1\nconsole.log(increase()) // 2\nconsole.log(increase()) // 3\n\n===>\n\nconst [num, setNum] = useState(0);\n\nconsole.log(num) // 0, 1, 2, 3\n\n() => { setState((prev) => prev + 1) } // 한번 실행\n() => { setState((prev) => prev + 1) } // 두번 실행\n() => { setState((prev) => prev + 1) } // 세번 실행\n```\n\n## 맺으며\n클로저는 역시 어렵습니다. 자주 사용하게 되는 개념일까..? 생각해도 아닌 것 같고.. 그렇다고 모르면 또 안 될 거 같은 개념이네요 ㅎㅎ 클로저 같은 헷갈리는 개념을 이해할 땐 저처럼 직접 설명하듯 작성하는게 최고라는 생각이 드네요.\n\n나중에 프로덕션 레벨에서 일할땐 정보의 은닉화가 중요할 때가 분명 있을 것 같단 생각이 듭니다. 지금 잘 배워서 나중에 중요한 변수 꼼꼼히 숨겨놓아야겠습니다!","subtitle":"클로저, 폐쇄적이고 안전환 환경에서 코딩할 수 있는 좋은 방법!","createdAt":"2022-11-22T09:26:56.944Z","updatedAt":"2022-11-26T18:20:13.109Z","publishedAt":"2022-11-22T09:27:03.353Z","thumbnail":{"data":{"id":4,"attributes":{"name":"javascript.png","alternativeText":null,"caption":null,"width":500,"height":300,"formats":{"thumbnail":{"ext":".png","url":"/uploads/thumbnail_javascript_d5e1b2cbfb.png","hash":"thumbnail_javascript_d5e1b2cbfb","mime":"image/png","name":"thumbnail_javascript.png","path":null,"size":7.59,"width":245,"height":147}},"hash":"javascript_d5e1b2cbfb","ext":".png","mime":"image/png","size":10.54,"url":"/uploads/javascript_d5e1b2cbfb.png","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-21T09:38:48.983Z","updatedAt":"2022-11-21T09:38:48.983Z"}}},"tag":{"data":{"id":2,"attributes":{"tag":"JavaScript","createdAt":"2022-11-21T09:37:13.012Z","updatedAt":"2022-11-21T09:37:42.502Z","publishedAt":"2022-11-21T09:37:42.498Z"}}}}},"meta":{}}},"__N_SSG":true}